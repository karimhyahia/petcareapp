rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the document belongs to the current user
    function isOwner() {
      return request.auth.uid == resource.data.userId;
    }
    
    // Helper function for common fields validation
    function hasValidFields() {
      let requiredFields = ['userId', 'createdAt'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    // Pets collection
    match /pets/{petId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Feeding schedules collection
    match /feedingSchedules/{scheduleId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Photos collection
    match /photos/{photoId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner();
    }
  }
}